# Generated by Django 5.2.1 on 2025-07-28 12:30

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ObjectiveRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('objective_index', models.PositiveIntegerField(help_text="Index of this objective in the session's objectives list")),
                ('objective_text', models.TextField(help_text='The specific objective being discussed')),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('move_to_next_votes', models.JSONField(blank=True, default=dict, help_text='Tracks votes from participants to move to next objective')),
                ('vote_initiated_by', models.CharField(blank=True, help_text='Username of the person who initiated the vote', max_length=150)),
                ('vote_active', models.BooleanField(default=False, help_text="Whether there's an active vote to move to next objective")),
            ],
            options={
                'ordering': ['objective_index'],
            },
        ),
        migrations.CreateModel(
            name='RelationshipInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invitation_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('to_email', models.EmailField(max_length=254)),
                ('relationship_type', models.CharField(choices=[('family', 'Family'), ('friend', 'Friend'), ('significant_other', 'Significant Other'), ('colleague', 'Colleague'), ('other', 'Other')], max_length=20)),
                ('message', models.TextField(blank=True, help_text='Optional personal message')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField()),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_relationship_invitations', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_relationship_invitations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_index', models.PositiveBigIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('objective_room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='counselling.objectiveroom')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('chat_round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='counselling.round')),
            ],
            options={
                'ordering': ['sent_at'],
            },
        ),
        migrations.CreateModel(
            name='LLMResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('inferenced_at', models.DateTimeField(auto_now_add=True)),
                ('chat_round', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='llm_response', to='counselling.round')),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('completed', 'Completed'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('categories', models.JSONField(default=list)),
                ('context', models.TextField(blank=True)),
                ('objectives', models.JSONField(default=list, help_text='AI-generated objectives for the session')),
                ('current_objective_index', models.PositiveIntegerField(default=0, help_text='Index of the current active objective')),
                ('capacity', models.PositiveSmallIntegerField(default=2)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('end_session_votes', models.JSONField(blank=True, default=dict, help_text='Tracks votes from participants to end the session')),
                ('end_session_vote_active', models.BooleanField(default=False, help_text="Whether there's an active vote to end the session")),
                ('end_session_vote_initiated_by', models.CharField(blank=True, help_text='Username of the person who initiated the end session vote', max_length=150)),
                ('final_summary', models.TextField(blank=True, help_text='AI-generated final summary of the session')),
                ('summary_generated', models.BooleanField(default=False, help_text='Whether the final summary has been generated')),
                ('hidden_by_creator', models.BooleanField(default=False, help_text='Whether the session creator has hidden this session')),
                ('hidden_by_invitee', models.BooleanField(default=False, help_text='Whether the invitee has hidden this session')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='round',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='counselling.session'),
        ),
        migrations.CreateModel(
            name='Reflection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feelings', models.TextField()),
                ('expected_outcome', models.TextField()),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reflections', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reflections', to='counselling.session')),
            ],
            options={
                'ordering': ['submitted_at'],
            },
        ),
        migrations.AddField(
            model_name='objectiveroom',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objective_rooms', to='counselling.session'),
        ),
        migrations.CreateModel(
            name='SessionInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invitation_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('message', models.TextField(blank=True, help_text='Optional message for the partner')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField()),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_session_invitations', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='counselling.session')),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_session_invitations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SessionParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('creator', 'Creator'), ('invitee', 'Invitee')], max_length=20)),
                ('invited_at', models.DateTimeField(auto_now_add=True)),
                ('joined_at', models.DateTimeField(blank=True, null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='counselling.session')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SessionSummaryResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('how_you_feel_now', models.TextField(help_text="User's response to 'How do you feel now?' at session end")),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='summary_responses', to='counselling.session')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_summary_responses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='Relationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_type', models.CharField(choices=[('family', 'Family'), ('friend', 'Friend'), ('significant_other', 'Significant Other'), ('colleague', 'Colleague'), ('other', 'Other')], max_length=20)),
                ('context', models.TextField(blank=True, help_text='Describe the context of your relationship')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this relationship')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships_created', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'constraints': [models.UniqueConstraint(fields=('from_user', 'to_user'), name='unique_relationship')],
            },
        ),
        migrations.AddConstraint(
            model_name='round',
            constraint=models.UniqueConstraint(condition=models.Q(('objective_room__isnull', True)), fields=('session', 'round_index'), name='unique_session_round_index_legacy'),
        ),
        migrations.AddConstraint(
            model_name='round',
            constraint=models.UniqueConstraint(condition=models.Q(('objective_room__isnull', False)), fields=('objective_room', 'round_index'), name='unique_objective_room_round_index'),
        ),
        migrations.AddConstraint(
            model_name='reflection',
            constraint=models.UniqueConstraint(fields=('session', 'user'), name='unique_reflection_per_session_user'),
        ),
        migrations.AddConstraint(
            model_name='objectiveroom',
            constraint=models.UniqueConstraint(fields=('session', 'objective_index'), name='unique_objective_room_per_session'),
        ),
        migrations.AddConstraint(
            model_name='sessioninvitation',
            constraint=models.UniqueConstraint(fields=('session', 'to_user'), name='unique_session_invitation'),
        ),
        migrations.AddConstraint(
            model_name='sessionparticipant',
            constraint=models.UniqueConstraint(fields=('session', 'user'), name='unique_session_user'),
        ),
        migrations.AddConstraint(
            model_name='sessionsummaryresponse',
            constraint=models.UniqueConstraint(fields=('session', 'user'), name='unique_summary_response_per_session_user'),
        ),
    ]
